/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
Drupal.debounce = function (func, wait, immediate) {
  var timeout;
  var result;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var context = this;
    var later = function later() {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
      }
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
    }
    return result;
  };
};;
/**
 * @file
 * Attaches behaviors for the Clientside Validation jQuery module.
 */
(function ($, Drupal, debounce, CKEDITOR) {
  /**
   * Attaches jQuery validate behavoir to forms.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *  Attaches the outline behavior to the right context.
   */
  Drupal.behaviors.cvJqueryValidateCKEditor = {
    attach: function (context) {
      if (typeof CKEDITOR === 'undefined') {
        return;
      }
      var ignore = ':hidden';
      var not = [];
      for (var instance in CKEDITOR.instances) {
        if (CKEDITOR.instances.hasOwnProperty(instance)) {
          not.push('#' + instance);
        }
      }
      ignore += not.length ? ':not(' + not.join(', ') + ')' : '';
      $('form').each(function () {
        var validator = $(this).data('validator');
        if (!validator) {
          return;
        }
        validator.settings.ignore = ignore;
        validator.settings.errorPlacement = function(place, $element) {
          var id = $element.attr('id');
          var afterElement = $element[0];
          if (CKEDITOR.instances.hasOwnProperty(id)) {
            afterElement = CKEDITOR.instances[id].container.$;
          }
          place.insertAfter(afterElement);
        };
      });
      var updateText = function (instance) {
        return debounce(function (e) {
          instance.updateElement();
          var event = $.extend(true, {}, e.data.$);
          delete event.target;
          delete event.explicitOriginalTarget;
          delete event.originalTarget;
          delete event.currentTarget;
          $(instance.element.$).trigger(new $.Event(e.name, event));
        }, 250);
      };
      CKEDITOR.on('instanceReady', function () {
        for (var instance in CKEDITOR.instances) {
          if (CKEDITOR.instances.hasOwnProperty(instance)) {
            CKEDITOR.instances[instance].document.on("keyup", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("paste", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("keypress", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("blur", updateText(CKEDITOR.instances[instance]));
            CKEDITOR.instances[instance].document.on("change", updateText(CKEDITOR.instances[instance]));
          }
        }
      });
    }
  };
})(jQuery, Drupal, Drupal.debounce, (typeof CKEDITOR === 'undefined') ? undefined : CKEDITOR);
;
/**
 * @file
 * Attaches behaviors for the Clientside Validation jQuery module.
 */
(function ($) {
  // Override clientside validation jquery validation options.
  // We do this to display the error markup same as in inline_form_errors.
  $(document).once('cvjquery').on('cv-jquery-validate-options-update', function (event, options) {
    options.errorElement = 'strong';
    options.showErrors = function(errorMap, errorList) {
      // First remove all errors.
      for (var i in errorList) {
        $(errorList[i].element).parent().find('.form-item--error-message').remove();
      }

      // Show errors using defaultShowErrors().
      this.defaultShowErrors();

      // Wrap all errors with div.form-item--error-message.
      $(this.currentForm).find('strong.error').each(function () {
        if (!$(this).parent().hasClass('form-item--error-message')) {
          $(this).wrap('<div class="form-item--error-message" role="alert"/>');
        }
      });
    };
  });
})(jQuery);
;
/**
 * @file
 * Javascript for functional hero.
 */

(function ($, Drupal) {

  'use strict'

  /**
   * Toggle visibility of block config content on click of titles.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Adds functionalhero behaviours.
   */
  Drupal.behaviors.functionalHero = {
    attach: function (context) {
      // Display the first tab by default.
      // TODO: if the page loads with a block ID, display that.
      $(window, context).once('functionalHero').on('load', function () {
        // Action on first tab
        $('.paragraph--type--v2-functional-hero .block-single-titles:first-child .block-content-toggle:first-child').addClass('active');
        var first_tab_content = '#' + $('.paragraph--type--v2-functional-hero .block-content-toggle:first-child').attr('id').replace("item", "content");
        $('.paragraph--type--v2-functional-hero .content-display').addClass('hidden');
        $('.paragraph--type--v2-functional-hero').find(first_tab_content).removeClass('hidden').addClass('visible');
      });

      $('.paragraph--type--v2-functional-hero .block-content-toggle').once().click(function (e) {
        // Don't jump around the page.
        e.preventDefault();

        var $toggle = $(this);
        // var $block_contents = $toggle.closest('.block-contents');
        var tab_content_id = '#' + $toggle.attr('id').replace("item", "content");

        // Hide all related tab content by default.
        $('.content-display').removeClass('visible').addClass('hidden');
        $('.block-content-toggle').attr('aria-expanded', 'false');
        $('.block-content-toggle').removeClass('active');

        // Display this tab.
        $('.paragraph--type--v2-functional-hero .block-content-toggle').removeClass('active');
        $toggle.attr('aria-expanded', 'true').addClass('active');
        $('.paragraph--type--v2-functional-hero').find(tab_content_id).removeClass('hidden').addClass('visible');
      });
      
      $(".select-menu a").click(function(event) {
        event.preventDefault();
        var id = $(this).attr('id');
        $('#parceltype').html($(this).html());
        $('.send_button').attr('href', id);
      });
    }
  };
}(jQuery, Drupal));
;
/**
 * @file
 * Defines the behavior of the Safe Space iFrame.
 */

(function ($, Drupal, drupalSettings) {
  'use strict';
  Drupal.behaviors.safeSpace = {
    attach: function (context) {

      // Build the iframe element and place it in the DOM.
      function hostWidgetInIframe(result, targetEl) {
        var iframe = document.createElement('iframe');
        iframe.setAttribute('id', 'safe-space-iframe');
        iframe.classList.add('safe-space-iframe');

        targetEl.prepend(iframe);
        targetEl.css('overflow', 'hidden');
        iframe.setAttribute("style", "height:100%;width:100%;position:fixed;top:0;bottom:0;background-color:rgba(0, 0, 0, 0.26);");

        iframe.contentWindow.document.open();
        iframe.contentWindow.document.write(result);
        iframe.contentWindow.document.close();
        iframe.scrollIntoView();
        iframe.focus();
      }

      // Remove widget iframe element from DOM.
      function destroySafeSpaceWidget() {
        var widgetFrame = document.getElementById('safe-space-iframe');
        if (widgetFrame) {
          widgetFrame.parentNode.style.overflow = "";
          widgetFrame.parentNode.removeChild(widgetFrame);
        }
      }

      // Get widget code from endpoint and generate iframe element.
      function launchSafeSpace() {
        var targetId = $('[data-launch-safespace]', context).data("target-element");
        var targetEl = $(targetId);
        var widgetEndpoint = drupalSettings.rmlSafespace.apiEndpoint;
        if (widgetEndpoint) {
          $.ajax({
            url: widgetEndpoint,
            success: function (result) {
              hostWidgetInIframe(result, targetEl);
            },
          });
        }
      }

      // Validation that widget is available.
      function isSafeSpaceAvailable() {
        var widgetHealthCheck = drupalSettings.rmlSafespace.apiHealthCheck;
        var widgetErrorMessage = drupalSettings.rmlSafespace.widgetUnavailableMessage;

        $.ajax({
          url: widgetHealthCheck,
          success: function (result) {
            launchSafeSpace();
          },
          error: function () {
            console.log(widgetErrorMessage);
            // Display text message in the banner - Widget not available at the moment.
          }
        });
      }

      /* Attach click behaviour to SafeSpace element with attribute
       * `data-launch-safespace`.
       */
      $('body', context).once('launch-iframe').on('click', '[data-launch-safespace]', function (event) {
        event.stopPropagation();
        isSafeSpaceAvailable();
        $(document).keyup(function (e) {
          e.stopPropagation();
          // Remove iFrame when press ESC.
          if (e.keyCode == 27) {
            destroySafeSpaceWidget();
          }
        });
      }).on('click', 'div.contextual', function (e) {
        // Remove contextual block from clickable area.
        e.stopPropagation();
      });

    },
  };

})(jQuery, Drupal, drupalSettings);
;
/**
 * @file
 * Provide toggling of Bing search form.
 */

(function ($, Drupal) {

  'use strict';

  Drupal.behaviors.rml_bing_search = {

    attach: function (context, settings) {

      var $searchBlock = $('#block-bingsearch');

      $searchBlock.once('rml_bing_search').each(function () {

        //existing search form
        var $menu = $('#block-search .menu-item-icon-search');
        $menu.click(function (event) {

          event.preventDefault();

          $searchBlock.toggleClass('visually-hidden');
          $menu.find('.open').toggleClass('visually-hidden');
          $menu.find('.close').toggleClass('visually-hidden');
          $('.quick-links').css('display', 'none');
          $searchBlock.find('.form-item-keys input').attr('placeholder', 'Search');
          $('#overlayrmgmenusearch').toggleClass('visually-hidden');
          $('.search-button-actions').toggleClass('visually-hidden');
          $("#block-bingsearch .search-bing").removeAttr("style");
          $('#block-bingsearch .search-bing div').removeClass('rml-bing-search');

          // Set focus to Search box while it is visible.
          if (!$searchBlock.hasClass('visually-hidden')) {
            $searchBlock.find('.form-item-keys input').focus();
          }

        });

        //new rmg search form
        var $menu1 = $('#block-rmgsearch .menu-item-icon-search');
        $menu1.click(function (event) {

          event.preventDefault();
          var $searchBlock = $('#block-bingsearch-2');
          $searchBlock.toggleClass('visually-hidden');
          $menu1.find('.open').toggleClass('visually-hidden');
          $menu1.find('.close').toggleClass('visually-hidden');
          $('.rml-bing-search').css('display', 'block');
          $('#overlayrmgmenusearch').css('display', 'block');
          if ($(window).width() < 1200) {
            $('body').css('overflow', 'hidden');
          }

          // Set focus to Search box while it is visible.
          if (!$searchBlock.hasClass('visually-hidden')) {
            $searchBlock.find('.form-item-keys input').focus();
          }

        });

      });

      //Close the overlay search form mobile/tablet view
      $('#block-bingsearch-2 .rml-bing-search .menu-item-icon-search.menu-item-icon.close').on('click', function () {
        $('#block-bingsearch-2').toggleClass('visually-hidden');
        $('.rmgheader .menu-item-icon-search .open').removeClass('visually-hidden');
        $('.rmgheader .menu-item-icon-search .close').addClass('visually-hidden');
        $('body').css('overflow', 'auto');
      });

      var $searchSubmit = $('input[name=Search]');
      $searchSubmit.each(function () {

        var $currentInput = $(this).parent().parent().find('.form-text');

        $(this).click(function (event) {
          // Prevent search if there is no text inside search bar.
          var searchInput = $currentInput.val();
          if (searchInput.length == 0 || searchInput === settings.emptyResultsText) {
            event.preventDefault();
            $currentInput.val(settings.emptyResultsText);
          }
        });
      });

      var $searchInputs = $('input[name=keys]');
      $searchInputs.each(function () {

        var $currentInput = $(this);
        var $closestClearButton = $(this).parent().next('.clear-text-input');

        toggleClearIcon($currentInput, $closestClearButton);
        clearSearchBar($currentInput, $closestClearButton);

        $currentInput.keyup(function () {
          // Check to see if there is text inside the search bar on key entry
          // if so display clear icon.
          toggleClearIcon($currentInput, $closestClearButton);
        });

        $currentInput.focus(function () {
          // Clear search bar while getting focus.
          if ($currentInput.val() != '') {
            $currentInput.val('');
          }
        });

      });

      /**
       * Toggle clear icon display when there is text in search bar.
       *
       * @param object currentInput
       *   Text input object.
       * @param object closestClearButton
       *   Closest clear button within the text input object.
       */
      function toggleClearIcon($currentInput, $closestClearButton) {
        // If there is content in the nearest search input then display cross.
        if ($closestClearButton && $currentInput.val().length > 0) {
          $closestClearButton.addClass('is-visible');
        }
        else {
          $closestClearButton.removeClass('is-visible');
        }

      }

      /**
       * Remove text from search bar when clear icon is clicked.
       *
       * @param object currentInput
       *   Text input object.
       * @param object closestClearButton
       *   Closest clear button within the text input object.
       */
      function clearSearchBar($currentInput, $closestClearButton) {
        // Clear out nearest search input.
        $closestClearButton.click(function () {
          $currentInput.val('');
          $closestClearButton.removeClass('is-visible');
        });
      }

      // Targetting Edge and IE browsers.
      if (navigator.userAgent.search('Edge') >= 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
        var input_ids = $('.menu-item-icon-search, #edit-keys, #edit-keys--2, #edit-track-number');
        searchbox_focus_update(input_ids);

        // On mouseout of Search icon and search box.
        function searchbox_focus_update(input_ids) {
          $(input_ids).mouseout(function () {
            if ($(input_ids).is(':focus')) {
              $(input_ids).blur();
            }
          });
        }
      }
    }
  };
})(jQuery, Drupal);
;
